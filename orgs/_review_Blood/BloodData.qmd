---
title: "BancodeSangue"
author: "Bragatte"
format: html
editor: visual
---
## Packages
```{r}
# install
pacman::p_load(
  vroom,          # Para leitura eficiente de arquivos CSV e TSV de grande volume de dados
  dplyr,          # Manipulação de dados (filtros, agrupamentos, mutações, etc.)
  ggplot2,        # Criação de gráficos e visualizações personalizadas
  RColorBrewer,   # Fornece paletas de cores para gráficos
  ggrepel,        # Adiciona rótulos aos gráficos evitando sobreposição de texto
  lubridate,      # Facilita a manipulação e conversão de datas
  scales          # Para formatação de eixos e rótulos de escalas em gráficos
)

```

## Read file csv

```{r}
## read with vroom from blooddonnor dataser 
bloodb <- vroom::vroom("/Users/bragatte/Documents/GitHub/Report/blood_bank.csv")
glimpse(bloodb)
```
## ETL
### RColorBrewer
```{r}
pal <- brewer.pal(8, "Set2")
```
### Breaks and labels
```{r}
# Definir variáveis para os breaks e labels do eixo x
dates.plt <- unique(bloodb$truncated.date)
dates.label <- format(unique(bloodb$truncated.date), "%b %Y")
```
### DFplots
```{r}
# Criar dfplot: sumarizar eventos por data e localização
dfplot <- bloodb %>%
  group_by(truncated.date, location) %>%
  summarize(n.events = sum(n.pos, na.rm = TRUE), .groups = 'drop')

# Criar dfplot.bounds: definir limites inferiores e superiores para os eventos
dfplot.bounds <- dfplot %>%
  mutate(
    lower_bound = n.events * 0.9,  # Limite inferior como 90% dos eventos
    upper_bound = n.events * 1.1   # Limite superior como 110% dos eventos
  )
```
## ggplot
```{r}
# Criar o gráfico sem geom_boxplot()
ggplot(bloodb, aes(x = truncated.date, y = 100 * q3, fill = location, group = location)) +  
  geom_errorbar(
    aes(ymin = 100 * q1, ymax = 100 * q5),
    position = position_dodge(width = 0.9),
    width = 5,  # Ajustado para melhor visualização em escala de data
    linewidth = 0.5
  ) +
  geom_crossbar(
    aes(ymin = 100 * q2, ymax = 100 * q4, y = 100 * q3),
    position = position_dodge(width = 0.9),
    width = 5,  # Ajustado para melhor visualização em escala de data
    linewidth = 0.5
  ) +
  geom_line(
    data = dfplot,
    aes(
      x = truncated.date,
      y = 100 * n.events,
      colour = location
    ),
    inherit.aes = FALSE,
    size = 1
  ) + 
  geom_point(
    data = dfplot.bounds,
    aes(
      x = truncated.date,
      y = 100 * n.events,
      colour = location
    ),
    size = 3
  ) +
  geom_text_repel(
    data = dfplot.bounds,
    aes(
      x = truncated.date,
      y = 100 * n.events,
      label = paste0(round(100 * n.events, 2), "%")
    ),
    nudge_y = 1,
    size = 3,
    show.legend = FALSE
  ) +
  facet_wrap(~ location, scales = "free_y") +  # Utiliza apenas uma faceta
  theme_minimal() +
  labs(
    x = "Data de Início dos Sintomas",
    y = "Casos Confirmados de Dengue por Habitante desde 2000 (%)",
    fill = "Localização",
    colour = "Localização"
  ) +
  theme(
    strip.text = element_text(face = "bold", size = 12),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "right",
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 10)
  ) +
  scale_x_date(
    breaks = dates.plt,
    labels = dates.label,
    date_labels = "%b %Y"
  ) +  
  scale_colour_manual(values = pal) +
  scale_fill_manual(values = pal) +
  scale_y_continuous(
    labels = scales::percent_format(scale = 1)
  )
```

## Dumberplot
```{r}
library(ggplot2)
library(ggalt)
library(dplyr)

# Preparação dos dados para o gráfico
# Vamos usar q1 como o valor mínimo e q5 como o valor máximo para cada localização
# e comparar as duas datas para cada localização.

# Filtrar para as duas datas que queremos comparar
data_filtered <- bloodb %>%
  filter(truncated.date == as.Date("2023-11-15") | truncated.date == as.Date("2024-06-15")) %>%
  mutate(date_label = format(truncated.date, "%b %Y"))

# Criar o gráfico
ggplot(data_filtered, aes(y = location, x = 100 * q1, xend = 100 * q5, color = date_label)) +
  geom_dumbbell(size = 3, colour_x = "blue", colour_xend = "red") +
  theme_minimal() +
  labs(
    title = "Comparação das taxas de Dengue (%) entre duas datas",
    subtitle = "Mostrando o mínimo (q1) e o máximo (q5) para cada localização",
    x = "Taxas de Dengue (%)",
    y = "Localização"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top",
    strip.text = element_text(face = "bold", size = 10)
  ) +
  scale_color_manual(values = c("Nov 2023" = "blue", "Jun 2024" = "red"))
```
```{r}
library(ggplot2)
library(ggalt)
library(dplyr)

# Filtrar os dados para incluir apenas as datas desejadas
data_dumbbell <- bloodb %>%
  filter(truncated.date %in% as.Date(c("2023-11-15", "2024-06-15"))) %>%
  mutate(date_label = format(truncated.date, "%b %Y"))

# Criar o gráfico dumbbell
ggplot(data_dumbbell, aes(y = location, x = 100 * q1, xend = 100 * q5)) +
  geom_dumbbell(
    size = 2,
    colour_x = "blue",        # Cor do ponto inicial (q1)
    colour_xend = "red"       # Cor do ponto final (q5)
  ) +
  geom_text(aes(x = 100 * q1, label = paste0(round(100 * q1, 2), "%")),
            vjust = -1, color = "blue") +
  geom_text(aes(x = 100 * q5, label = paste0(round(100 * q5, 2), "%")),
            vjust = -1, color = "red") +
  theme_minimal() +
  labs(
    title = "Comparação das Faixas de Casos de Dengue",
    x = "Taxa de Casos Confirmados de Dengue (%)",
    y = "Localização"
  ) +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(face = "bold", size = 10)
  )

```

```{r}
library(ggplot2)
library(ggalt)
library(dplyr)

# Preparar os dados para que cada linha seja uma data e localização, com q1 e q5 representando os valores extremos.
data_dumbbell <- bloodb %>%
  filter(truncated.date %in% as.Date(c("2023-11-15", "2024-06-15"))) %>%
  mutate(
    date_label = format(truncated.date, "%b %Y"),
    q1_percent = 100 * q1,
    q5_percent = 100 * q5
  )

# Criar o gráfico
ggplot(data_dumbbell, aes(y = location)) +
  geom_dumbbell(aes(x = q1_percent, xend = q5_percent, color = date_label), 
                size = 2, 
                color_x = "purple", color_xend = "green") +
  geom_text(aes(x = q1_percent, label = paste0(round(q1_percent, 2), "%")), 
            color = "purple", vjust = -0.5, hjust = 1) +
  geom_text(aes(x = q5_percent, label = paste0(round(q5_percent, 2), "%")), 
            color = "green", vjust = -0.5, hjust = 0) +
  theme_minimal() +
  labs(
    title = "Variação de Casos Confirmados de Dengue (%) entre Datas",
    x = "Taxa de Casos Confirmados de Dengue (%)",
    y = "Localização"
  ) +
  theme(
    axis.text.y = element_text(face = "bold", size = 9),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  ) +
  scale_x_continuous(
    limits = c(0, 100),  # Ajuste conforme necessário
    labels = scales::percent_format(scale = 1)
  ) +
  scale_color_manual(values = c("purple", "green"))

```

```{r}
library(ggplot2)
library(dplyr)
library(ggalt)

# Calcular as médias e desvios padrão para q1 e q5 (se necessário)
stats <- bloodb %>%
  summarise(
    mean_q1 = mean(q1 * 100),
    mean_q5 = mean(q5 * 100),
    sd_q1 = sd(q1 * 100),
    sd_q5 = sd(q5 * 100)
  )

# Transformar os dados para conectar q1 e q5 para cada localização
ggplot(bloodb) +
  # Adicionar retângulo para média e desvio padrão
  geom_rect(
    xmin = stats$mean_q1 - stats$sd_q1, xmax = stats$mean_q1 + stats$sd_q1,
    ymin = min(bloodb$truncated.date), ymax = max(bloodb$truncated.date),
    fill = "#762a83", alpha = 0.05
  ) +
  geom_rect(
    xmin = stats$mean_q5 - stats$sd_q5, xmax = stats$mean_q5 + stats$sd_q5,
    ymin = min(bloodb$truncated.date), ymax = max(bloodb$truncated.date),
    fill = "#009688", alpha = 0.05
  ) +
  # Adicionar linhas verticais para as médias
  geom_vline(xintercept = stats$mean_q1, linetype = "solid", size = 0.5, color = "#762a83") +
  geom_vline(xintercept = stats$mean_q5, linetype = "solid", size = 0.5, color = "#009688") +
  # Adicionar "dumbbells" conectando q1 e q5
  geom_dumbbell(aes(x = q1 * 100, xend = q5 * 100, y = location), size = 2, color_x = "#762a83", color_xend = "#009688") +
  # Adicionar pontos
  geom_point(aes(x = q1 * 100, y = location), color = "#762a83", size = 3) +
  geom_point(aes(x = q5 * 100, y = location), color = "#009688", size = 3) +
  # Adicionar rótulos de valores
  geom_text(aes(x = q1 * 100, y = location, label = paste0(round(q1 * 100, 2), "%")), hjust = -0.3, color = "#762a83") +
  geom_text(aes(x = q5 * 100, y = location, label = paste0(round(q5 * 100, 2), "%")), hjust = 1.3, color = "#009688") +
  # Personalizar o tema
  theme_minimal() +
  labs(
    title = "Comparação de Casos de Dengue Confirmados (%)",
    x = "Taxa de Casos Confirmados (%)",
    y = "Localização"
  ) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.ticks.x = element_line(color = "#4a4e4d"),
    text = element_text(family = "Segoe UI", color = "#4a4e4d"),
    plot.margin = margin(1, 1, 0.5, 1, "cm")
  )

```

